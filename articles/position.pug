article#position
  .container
    h2 Позиционирование
    p position - это фундаментальное свойство CSS, которое позволяет определить, в каком месте браузер будет отрисовывать элементы. 
    p Свойство position обладает следующими значениями:
    ul
      li static - значение по умолчанию. Элемент будет отрисован "нормально" 
      li relative - позволяет отрисовать элемент "нормально", но, благодаря CSS-свойствам top, right, bottom и left, 
        | появляется возможность сместить блок из "нормальной" позиции. 
      li absolute - самое интересное свойство. Положение блока рассчитывается при помощи top, right, bottom и left,
        | но не относительно изначального места, а относительно ближайшего родителя с position не равным static или элемента body. 
      li fixed - положение относительно границ экрана. Также рассчитывается с помощью top, right, bottom и left, но родителем является сам экран. 
      li sticky - "прилипает" к границам экрана в том случае, если выходит за границы экрана. Также устанавливается при помощи top, right, bottom и left.
        | Подробнее тут: 
        a(target="_blank" href="https://medium.com/web-standards/sticky-bc7ff7088693") Как на самом деле работает position: sticky в CSS

    p Поэкспериментировать с position: absolute можно здесь:
    a.codepen(data-id="gOYwLmY" data-height="400")

    p Поэкспериментировать с position: sticky можно тут:
    a.codepen(data-id="rNBMWzp" data-height="400")
    
    h3 Смещение блока: top, right, bottom и left
    p По умолчанию значением этих свойств является auto. Мы можем использовать для задания положения, например, px или %. 
     | Используются в купе с нестатично спозиционированными блоками. 
    ul
      li top смещает блок сверху вниз;
      li bottom смещает блок снизу вверх;
      li left смещает блок слева направо;
      li right смещает блок справа налево.

    h3 Слои и z-index
    p Иногда, сместив один блок относительно другого, они начинают "наезжать" друг на друга. Причём, не всегда так, как мы этого хотим. 
      | Что если мы хотим, чтобы блок, который отрисовался "под" вторым блоком, был отрисован "над" ним? 
      | Для этого на помощь приходит свойство z-index. Значением этого свойства может быть просто любое число, без единиц измерения. 
      | Установив z-index: 2 для первого блока и z-index: 1 для второго, мы точно будем знать, что первый блок будет отрисован "над" вторым, так как
      | его z-index больше. По умолчанию же, "над" отрисовывается тот блок, который в структуре HTML был ближе к концу документа. 
    p Если вы математик, то вам будет понятно следующее объяснение: наш экран имеет две координаты: X и Y. Координаты начинаются из верхнего левого угла.
      | X направлен вправо. Y &mdash; вниз. А теперь представим себе ещё одну координату &mdash; Z. 
      | Она направлена из той же точки, но перпендикулярно экрану, на зрителя. Это и есть z-index. 
    p Если вы работали с фотошопом или какими-то другими графическими редакторами, то вам знакомо понятие "слои". Мы можем распологать различные изображения
      | на этих слоях, а в случае перекрытия, показан будет тот слой, что находится выше. И это тоже z-index. 
      
    p Раскомментируйте строку с z-index, чтобы понять, как работает это свойство.
    a.codepen(data-id="KKPgNrX" data-height="400")