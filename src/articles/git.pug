article#git
  .container
    h2 Кратко о GIT
    p
      | GIT — это система контроля версий. Позволяет отслеживать и фиксировать изменения в коде, смотреть,
      | как развивался проект и какие люди вкладывали в него своё время. Без базовых знаний гита, работать
      | frontend-разработчиком просто нельзя.
    h3 Установка
    p
      | По этой ссылке, вы найдете инструкцию по установке GIT на свой компьютер: 
      a(href="https://git-scm.com/downloads" target="_blank") Download GIT
    h3 Настройка
    p После установки, нам нужно настроить GIT. Самое главное - выполнить команды:
    pre(data-lang="bash")
      | git config --global user.name "My Name"
      | git config --global user.email myEmail@example.com

    h3 GitHub
    p
      | Теперь нужно зарегистрироваться на GitHub или на любом другом сервисе для хостинга проектов, основанной
      | на системе контроля версий GIT.
    p
      a(href="https://github.com/" target="_blank") GitHub.com
    p
      | С помощью генератора ключей, нужно создать новый ключ для репозитория. Для этого, воспользуйтесь командой
    pre(data-lang="bash")
      | ssh-keygen

    p
      | Следуйте инструкциям. После создания ключей, поместите их в папку C:\Users\YOUR_NAME\.ssh, для
      | пользователей Windows или в папку ~/.ssh, для пользователей Linux или MacOS.
    p
      | На сайте GitHub.com добавьте публичный (id_rsa.pub) ssh-ключ. Это можно сделать в разделе настройки
      | пользователя.
    p
      | Создайте на сайте новый проект. После создания проекта, вы найдете ссылку вида
      | git@github.com:YOUR_LOGIN/YOUR_PROJECT.git
    p
      | На своём компьютере создайте папку, где будете хранить ваши проекты. В этой папке откройте терминал
      | (например, C:\projects) и выполните команду:
    pre(data-lang="bash")
      | git clone git@github.com:YOUR_LOGIN/YOUR_PROJECT.git

    p На данном этапе можно сказать, что мы настроили GIT.
    h3 Основные команды
    p
      | Чтобы сохранить измененные файлы в каком-то состоянии, нужно их закоммитить. Для этого нужно сначала
      | добавить измененные файлы в будующий коммит
    pre(data-lang="bash")
      | git add -A          
    p Далее нужно сохранить коммит
    pre(data-lang="bash")
      | git commit -m "Название коммита"          
    p
      | Коммиты лучше всего называть так, чтобы было понятно, что было сделано в этом коммите, как именно
      | изменилось приложение или сайт. Например, "Изменен цвет кнопки корзины". Еще лучше было бы, если бы мы
      | написали это на английском.
    p Теперь нужно отправить изменения на сервер. Для этого есть команда:
    pre(data-lang="bash")
      | git push          
    p Чтобы получить изменения с сервера, существует команда:
    pre(data-lang="bash")
      | git pull          
    p
      | Кроме того, вам стоит изучить такие команды, как merge, status, branch checkout, revert и многие другие.
    p Больше подробностей читать здесь: 
    ul
      li
        a(href="https://proglib.io/p/git-for-half-an-hour/" target="_blank")
          | Git за полчаса: руководство для начинающих
      li
        a(href="https://tproger.ru/translations/git-quick-start/" target="_blank")
          | Git. Быстрый старт по использованию основных операций с объяснениями
      li
        a(href="https://git-scm.com/book/en/v2" target="_blank")
          | Pro GIT
